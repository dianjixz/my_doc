#PNG
# CoreMP135 产品纲要

电子信息行业产品的对品是从硬件开始，最后一定是软件生态的比较。硬件是非常容易达到硬性要求的天花板（最优的质量），但软件生态一直是各类科技公司最后的比拼面。  
硬件在过去的科技发展过程中，逐渐从件件手工到目前的批量复制，已经成为了科技公司攻城略地的基石，所以保证硬件的稳定生产是公司发展的良好基础。  
本篇文档主要论述 Linux 产品在当前环境中的发展路线和方向纲要。



## 背景

### 现有的市场 Linux 产品
Linux 在当前的科技环境中得到了充足的发展，得益于当前对高复杂性需求，以及 UI 视觉的需求，之前以 MCU 类产品已经无法满足。拥有开源 Linux 系统的 SOC 类的嵌入式系统开始承担此部分的需求，得益于芯片设计的集成化。在早期的此类高复杂任务，往往是由性能主机搭配复杂特定功能的芯片来玩成的。  
按照当前 Linux 产品的通用性来区分，可分为`定向类`、`非定向类`、`半定向类`。

- **定向类**：面向特定领域的产品，功能性强，拥有某类特殊型V硬件，专项对某一领域优化，用于满足这一领域严格的需求。比如工程控制计算机、安卓手机、以太网交换机、物联网网关等。
- **非定向类**：也是通用类、拥有较为全面的能力，其尽可能的添加通用器件，提供较少的或者原始的软件生态，客户需要二次定制开发才能使用。此类产品以开发板类为主，主要面向二级厂商，由二级厂商进行定制开发后，再出售给用户使用。也有以学习或者兴趣为目的的个人开发者购买此类产品。代表类产品有各类的电子派，拥有相对量好的性能、较低的功耗。
- **半定向类**：此类是 AI 兴起后、对算力极大依赖而产生的。传统的芯片外挂方案无法满足高带宽，高算力，低功耗的需求。此类产品都会以 AI 加速为卖点，但是较高的开发门槛，高额的价格，参差不齐的软件生态人让相关使用人员通常又爱又恨。由于在设计阶段定定下的够用的性能，让使用者非常纠结于硬件的选型。受限于硬件的瓶颈，很多产品可能在磨合中就撤项。具体代表是各类 AI 开发板，以及各类 AI 芯片。

#### 定向类
lora无线网关、有人raspberry PLC、4G 上网模块、人脸门禁、视频 IPC 摄像头、工控机、示波器类的产品主计算机、智能电视盒子、路由器、ROS 机器人中央计算机、交换机等。
#### 非定向类
raspberry、香橙派、RISCV开发板、熊猫派、香蕉派、龙芯开发板、算能系列。
#### 半定向类
V831、R329、Jetson、TPU开发板、瑞芯微系列、地平线系列。

### 现有的主要芯片厂家
由于开发板的属性决定了厂家要对使用者开放一定的资料、所以在这个领域中，能够愿意完全开源的厂家不多，特别是涉及到专有加速硬件，更是有极少的厂家愿意进行开源。  
同时芯片设计又是一个投入非常高的行业，能够选择的芯片还是非常有限的。  
在 Linux SOC 领域的芯片厂商与芯片型号如下：

- 全志：AI 相关的 V8 系列，V831、V833、V853、V851、R329 等。通用系列，V3s、H3、H6、F1C、F133（D1）等。
- 瑞芯微：AI 相关，RK3588、RK3399、RK3288、RV1109、RV1108、RK3328、RK1106
- 爱芯：AI 视频相关，ax620、ax630
- 算能：通用系列，RISCV，SG200系列、AI IPC 系列，CV系列
- inter：通用系列，Cherry Trail Z8350 处理器
- 英伟大：AI加速系列，Jetson
- 谷歌：AI加速系列，TPU
- 恩智浦：通用系列，IMX6ULL
- 瑞萨：AI系列，RZ/V、通用系列，RZ/A、工控系列，RZ/T
- st：通用系列，MPU系列
- 博通：BCM2377（树梅派）
- 地平线：AI系列



### 1. 产品愿景与目标
- **愿景声明**

构建 M5STACK 的 Linux 易用产品与生态，和现有产品一起，构建出便捷智慧物联网。

- **目标客户**

期望快速构建起物联网应用系统，便捷的部署智慧感知系统，远程操控系统，智慧控制系统。

- **核心功能**

提供预定义的物联网感知软件系统，提供快速成体系的传感器部署环境，提供便捷大规模组网系统。每一个节点拥有真正的智慧。

### 2. 市场调研与需求分析
- **市场分析**：研究当前市场趋势、竞争对手分析、SWOT分析（优势、劣势、机会、威胁）。

当前市场存在多种型态的 Linux 系产品，主要有三类代表，以 UI 显示为主的广告机、以工程控制计算机为主的工控机、以 AI 加速为主的 AI 音视频产品。CoreMP135 属于通用控制型 Linux 主机，优点在于低灵活高实时的裸机控制，和高灵活低计算的 Linux 通信计算。  
在算力方面，CoreMP135 相较于目前市场上的各类 Linux 产品，算力是偏低的，ST 的定位也是` STM32MP13 微处理器专为入门级 Linux、裸机或 RTOS 系统设计`。所以无法提供强大的算力支撑。

在芯片硬件方面，CoreMP135 提供了高机安全功能，包括但不限于硬件加密、安全区域、安全代码隔离等。这类的优势在边缘计算节点中是非常具有优势的，它能提供一个安全的运行环境，预防黑客攻击，用户篡改硬件等。可以放心的放在用户侧运行，不用但心被破解的风险。  

在市场中，存在同品类的竞争产品，分别是米尔电子 MYC-YF13X核心板及开发板、正点原子的 STM32MP1 开发板。

米尔电子的产品主要以提供电子模块为售卖对象，其产品体系内存在多规格，多型号的核心模组。

正点原子的产品主要以开发板为主，主要服务对象是 Linux 的学习者，和一部分的核心模组业务。

米尔电子和正点原子的产品同属于核心模组和开发板业务领域，两者的教程和产品同质化严重，属于重复赛道。

CoreMP135 属于产品预研型，可直接面向用户，也可直接当作成品产品使用。在定位上存在差异，没有同质化赛道，竞争压力小。

当前缺点，文档少，还未建立成熟的软件体系，目前能够提供的是一个较为原始的产品型态，附加功能少，主要依赖客户自行进行开发和使用，极大概率沦为学完即弃状态。

CoreMP135 潜在的机会，在物联网领域，当前除了华为的软总线技术外，还未出现通用的软总线技术，当前的物联网服务商都是各自为战，将传感器的生态封存在自己的领域，本公司的 EZdata 本质也是在构建这一类的生态。CoreMP135 可以工作在传感器的边缘节点领域，工业控制现场。

当前工业现场控制很少采用此类设备，宁德时代，以及宁德时代的供应商都比较抗拒使用此类设备。据给宁德时代提供锂电池检测设备的朋友说，大型的质检设备是不允许出现停机现象的，通常是 7 * 24 小时不断运行，因此项目预算通常比较高，研发时间比较短，不愿意接受不成熟的方案。同时，在给宁德时代提供制造设备的机械企业，电气化的稳定和成熟通常为第一选择。机械设备的主要研发重点是侧重于机械结构的制图与绘制。CoreMP135 想要在该领域内取得一定突破，还是有一定难度的。工业控制现场恶劣的工作环境，以及故障的高风险，巨额的经济损失通常不会轻易让这类简单的商业级产品轻易进入。  

在轻型产品线，智慧化生产线，小型生产设备非常乐意采用此类设备，主要的原因在于成本低，风险等级低，迭代迅速。但这需要产品能够提供足够的便利性，最好是能够有现成的方案，直接套上就能使用。个人觉得这才是 CoreMP135 应该侧重的工业控制的方向。

- **用户需求调研**

用户对于 Linux 产品的需求要分不同人群来讲的。当前 Linux 产品面向的人群主要分为三类：

第一类，开发者、创客。这类人群拥有一定的 Linux 系统认知，拥有较强的开发能力。对于这类人群来说，一个较为完善的嵌入式 Linux 产品就能满足他们的需求，他们能够在 Linux 上进行便捷的开发，完成自己想要他们做的事情。

第二类，商业使用者。这类的需求主要是一个完善的 Linux 产品设备，他们通常自行进行开发，将自己的应用程序部署在产品中。

第三类，学习者。这类拥有较少的开发经验，通常是从单片机的开发能力过渡而来，对单片机系统有着较强的自我认知，但是在使用 Linux 还是比较欠缺的，初期通常会以单片机的思维来使用 Linux ，所以有非常多的疑问，这类是最需要文档的一类人群。

当前商业环境中，对于开发板的教程通常仅仅限于安装系统,以及简单的 hello world。原因有几点，第一, Linux 是一个庞大的体系，它是当前高级编程的精华，很多的高级编程方式都由 Linux 发展而来的，其中包含了大量算法，控制方式，编程模式等等，现实中几乎大于三分之二的代码在和 linux 平台有关，在这个体系中养活了全世界的程序员和嵌入式程序员。根本无法简单的全面的对 Linux 和 Linux 应用进行描述，这种活，国家图书馆都不一定做的完。第二、有专门培训 Linux 体系的教育人员，大量的培训教育人员从事 Linux 体系的教育，互联网上也有非常多关于 Linux 的知识手册或者文章，考虑自学的话，完全可以找到足量的相关资料。产品文档能做的事就是尽量描述好自家的产品参数，如果有相关配套的入门书籍，那将是最好不过的事情了。

- **技术趋势**：分析当前及未来的技术趋势，如容器化、云计算、物联网等。

在科技发展的大环境下，我们拥有成熟的互联网体系，拥有扎实的技术背景，拥有庞大的未开发的潜在的技术市场。当前的大环境是工业 4.0 的万物联网背景，AI 的强势崛起，替代了之前的专家系统，在软件决策层面提供非常有力的技术支撑。所以未来的技术趋势一定是朝着多端接入的路线行进的。AI 会在系统中央完成决策，调用各类设备的接口，完成动作，那类设备能够快速被三方调用，在 AI 决策时代就能被快速采用。三方调用系统的建立需要一定的开发周期，这是抢占技术路线的非常好的领先时期。  

典型系统为 homeassistant 搭配的 ESPHome 系统，通过简单的配置，快速将嵌入式设备和传感器接入 homeassistant 系统。

也有华为背景开发的传感器数据中台方案，采用 KubeEdge 方案，将边缘 Linux 设备接入 K8s 集群中，实现所有计算节点统一调动,使用自身的软总线框架，便捷的将边缘计算节点中的传感数据调入算法集群中，进行计算，储存，展示等服务，快速部署大规模传感服务。在政企，矿业，农业等监控领域有着非常强大通用的能力。

总体而言，Linux 产品的大发展方向就是集群，多节点，远程控制，稳定运行平台。

### 3. 产品设计与规划

关于 CoreMP135 的产品设计已经定型，PCB 和外观已经无再改动的可能。这里只讨论 CoreMP135 的软件生态设计与规划。

CoreMP135 的应用可以从单机应用和系统应用。

单机应用是涉及的个人开发者方向，主要的目的让个人用户能够将 CoreMP135 用起来，看到 CoreMP135 的价值，从而激发个人消费者购买的欲望。  

单机应用也是一些面向具体业务的客户的最直接的需求，他们有着明确的业务需求，明确的性能指标，以及尽可能低的成本，和接近售卖的产品型态。

当前 CoreMP135 能够支撑起单机级别的应用有下面几个：

- **智能家居计算中心**：以 homeassistat 为例，在没有视频等大算力需求的场景中，低功耗，够用的设备性能，持久性的待机，能够完成家庭设备的自动化管理，这样一个理想设备型态是他们非常完美的产品型态。在这个场景中，大多数个人开发者会使用各类遗弃的设备进行改造，但对于完美符合要求的设备并没有过多的选择。这类场景中，最大的痛点就是系统的安装、传感器、执行器的接入。受限于用户的网络环境，和动手能力，能够顺畅接入的都是经过很多次的尝试和折腾才完成。技术推广路线以 homeassistant 为主。

- **数据收集服务器**：一个小型的数据服务器，用于收集传感器数据。此类应用常用于物联网开发者，轻松的记录传感器数据，进行数据分析。特别是家庭数据，或者开发数据等。当前用户的主要痛点就是大型数据库非常复杂，电脑主机无法长时间运行收集数据，此设备非常轻松就完成了此类任务。技术推广路线以 firebird 数据库和 sqlite3 数据库为主。

- **机器人控制器**：CoreMP135 可以作为 Linux 机器人控制主机，相对传统的 MCU 型主机，它有更强的互联互通能力，能够更方便便捷的接入各类传感器和运行各类机器人控制系统。搭配传感器模块，非常轻松就能胜任在日常巡检领域的任务。
- **智能音箱**：CoreMP135 可以搭配麦克风完成对 AI 服务器端的请求和播放内容，属于通用型应用。
- **数据显示中控**：这类的功能型态有点类似于广告机，但对于 CoreMP135 来说，使用即时渲染程序是比较有难度的，对于使用 LVGL、QT5 等框架编写的程序运行还是可以的。结合 UIflow ，可以将写一个 UIflow 的服务端程序，接收 uiflow 下发的固件，显示 uiflow 操作的内容。

在联机集群领域，也是大规模部署领域，主要有下面几个应用方面：

- **集群节点**：这是目前 CoreMP135 能直接进入的领域，也是当前商业客户选择的主要目的。集群的技术范围主要有两方面，一方面是利用 Linux 的本机服务建立网关节点，将数据上传到总服务器，典型为 loraWAN 网关，zigbee 网关等等。另一方面是建立集群任务下发，典型的就是华为背景的数据中台服务，建立终端计算集群，这类的集群通常拥有远程控制通道（SSH）等，能够集中调度终端节点的任务，比如机器人控制集群，将任务程序远程下发到各个计算节点中，实时检查终端计算节点的状态，典型的数字孪生生产服务。示例场景：一、数控加工中心生产线的任务控制节点，在总服务器中对各个节点进行任务调整和调度。二、农业管理领域，远程终端节点进行自动化农业任务执行，其目的是一个终端计算节点接管一个区域或者一个项目单元控制系统，可以离线可远程操作。提升整体农业系统的稳定性，在总服务器故障时也能保证项目单元的自动化任务正常执行。MCU 通常不具备灵活的远程服务调整能力，也无法承担较为复杂的任务模式。MCU 的远程 OTA 升级是一件非常为危险的事情，在升级时刻，处于离线时刻。其次每次调整都需要重新编写 OTA 程序，需要专业的技术人员机进行调整，对于批量的项目是一个比较痛苦的事情。

#### **架构设计**：制定系统架构，包括内核、驱动、用户界面等部分。

当前的架构技术路线可以有三种路线：单机路线、联机路线、Uiflow路线。

架构设计的目标是让 CoreMP135 变得更加易用，易用是针对个人的模式化应用来考虑的。

路线一：uiflow 模式，将 CoreMP135 影射成一个 MCU 类的产品，实现快速开发单机应用。包括 LCD 的快速刷图，各类硬件接口的使用（i2c、can、uart等）。

技术规划，在 CoreMP135 端编译一个 micropython 服务程序，按照 uiflow API 的 MQTT 订阅的方式接受 uiflow 的程序推送，并执行。同时可以返回执行结果。

优点，用户可以无视 CoreMP135 的 Linux 属性，按照 arduino 或者 uiflow 模式继续使用 CoreMP135，对于简单调用 ethcat、modbus 等系统级应用有帮助（在对时序要求不严格的场景下）。

缺点，无法体现 CoreMP135 的 Linux 属性，无法体现 CoreMP135 自身的优势，相对于 CoreS3 这类的产品，价格是偏高的。很多系统级应用较难体现，无法完成复杂应用的编写。想体验 linux 属性的人不会接受这样的使用方式，对于单片机级别的应用有些过于臃肿了。uiflow 的运行效率无法满足一些苛刻的场景需求。对于简单的机器人控制器类场景，单片机的编程方式也许更加贴近用户。

路线二：统一平台模式，为 CoreMP135 开一个类似于软总线的框架，框架内写好各类的传感器驱动，简单配置即可即插即用，充分发挥 CoreMP135 的平台优势。

技术规划，远端服务器使用 mqtt + rpc 协议方式接入服务器，为服务器提供边缘计算控制调用，计算节点部署传感器框架，使用配置来增删改查传感器执行器。同时，类似于 CoreS3 此类设备可直接与 CoreMP135 平台总线通信，将自身作为设备接入到软总线中。相关传感器数据可通过条件周期方式或者远程调用方式在软总线框架中提供。软总线可提供计算服务，CoreS3 在接入软总线后可通过 RPC 方式快速调用远端的算力。总体而言，CoreMP135 担任终端计算节点，为自身和边缘mcu 节点提供平台服务。多个 CoreMP135 可完成自组集群，快速形成物联系统。形成物联生态系统，完成智慧物联战略。

优点，充分体现 CoreMP135 的平台属性，展现平台生态战略，能够完成物联闭环。属于应用型项目，用户要求低，仅要求熟练使用计算机。

缺点，开发周期长，需要长期规划和人力资源投入。属于战略性技术模式，当前没有特定项目做支撑。

路线三：具体单体应用模式，单独发布配置好的 homeassistant、openplc、3D print、firebird、sqlite3、node-red、openwrt、arch 等单例系统，并编写详细的文档与视频，介绍其系统和属性。

技术规划：开发适配维护各类应用场景，组建文档系统。告诉用户 CoreMP135 是一个什么样的工具，能够怎么使用。

优点，应用适配型路线，让用户知道 CoreMP135 可以怎样用，能够给用户提供应用方向需求。对单例用户友好，能够提升他们对 Linux 产品的认知。

缺点，没什么主要缺点，友商的正常发展路线，靠产品型态吸引用户。

路线四：开源教育模式，编写系统的教育书籍，让用户能够在 CoreMP135 上学习 Linux 知识和操作实践。

技术规划：编写完善教育类书籍，以 CoreMP135 的各类开发细节为例。

优点，能够建立嵌入式教育体系，增加以 CoreMP135 为中心的周边拓展性收入。

缺点，没什么主要缺点，需要长期的教程资料编写。

### 4. 开发与测试

uiflow 方案：

属于模拟 MCU 的模式。

![截图 2024-07-10 16-01-55](/home/nihao/图片/截图/截图 2024-07-10 16-01-55.png)

写一个 MCU 服务进程，订阅 uiflow 服务器，编写 micropython 兼容层。服务进程接受 uiflow 传过来的 python 代码，并管理 micropython 进程。



统一平台方案：

<img src="/home/nihao/图片/截图/截图 2024-07-10 15-39-27.png"  />



其中 CoreMP135 为中间微服务，是一个小型的完整的服务栈，提供 web 管理界面，能够和移动端 APP 进行通信。传感器和执行器模型用于操作底层传感器和为软总线提供设备服务，总线模型用于维护分布式软总线互联任务。终端算法组件用于执行数据的过滤和执行操作，能够执行简单的自动化触发任务。终端数据库用于记录系统的动作和传感器历史数据，单机服务组件用于管理下属 ATOM 组件。

该模型可参考 HomeAssistant 管理模型，其具有基本的完整型态。但 HomeAssistant 缺少的是集群自组织功能，它只能工作在单例模式，没有现成的集群组织方案。单机服务组件可参考 ESPHome，用于调整下方的组件功能。

技术规划：可选择使用现成的 HomeAssistant 平台，也可进行自行研发设计。

具体细节较为复杂，在此不做详述。

易用型设备模型方案：

易用型设备模型方案属于模拟 MCU 的模式，其中有多种方式，下面有可供参考的方案。

第一种、Linux 本体设备驱动统一模型，编写大量的 Linux 杂项设备驱动，用户可以通过类似于 raspbi-config 方式来配置需要加载和配置的传感器驱动。被加载的传感器会在 /dev 目录生成设备接口，用户可以通过多种方式来使用标准调用操作传感器。

优点：用户不需要再为各类传感器、执行器编写驱动，能够更加快捷使用标准接口获取传感器的内容。

缺点：对用户的要求较高，需要有较强的编程能力以及对框架的理解能力，用户依旧需要学习 Linux 下的操作与编程。需要详细的文档对用户进行详细的描述接口文件的使用。使用操作复杂，不能具备通用性。

第二种、在应用层编写服务组件，用户可以通过类似于 raspbi-config 的方式起用组件，将传感器执行器抽象成设备总线中的消息，以 MQTT 为例，配置成请求响应型数据请求方式，也可以配置成定时发布型方式。用户只需要编写订阅程序就能使用此类设备的传感器数据。这是大多类机器人操作系统的底层原理，比如 ROS 机器人。

优点，能够建立自己的设备管理软件系统，形成独立的机器人操作系统体系。

缺点，同质化严重，应用面窄，需要有足够的业务支撑才会有人使用。对用户的要求较高，需要有较强的编程能力以及对框架的理解能力，用户依旧需要学习 Linux 下的操作与编程。

第三种、兼容层方案。就是 uiflow 类方案的总称，编写与 arduino 类似的编程兼容层，提供某种语言 C 或python 的编程 API，为用户模拟出一个 mcu 环境，好让用户来进行编程。

优点，在简单编程上和传统的方式接近，单片机用户更加容易接受，在限定的任务范围内有着很好体验效果。一但超出使用限定任务范围，仍然需要用户拥有 Linux 命令和编程的能力。

缺点，无法体现 Linux 的系统特性，Linux 用户不会接受这类方式，一些概念较难被用户接受。

第四种、SDK 方案，提供编程框架和代码库，减少用户的编程的准备工作。提供可以各类传感器的 API，准备好描述文档。

优点，减轻用户学习、使用、开发 Linux 产品的环境配置的痛苦，加快用户开发业务程序的进程。

缺点，对 Linux 用户和工程师友好，但对初学者不友好。以旧需要熟悉使用 Linux 编程。

## CoreMP135 软件生态现状

1、拥有 Linux 开发 SDK 框架 M5Stack_Linux_Libs. 拥有大量的 demo 例程。而且在持续开发进程中。

2、拥有多个操作系统发行版：buildroot、debian12、openwrt。arch 正在准备中。

3、拥有 firebird 数据库环境，正在添加 HomeAssistant 环境、openplc 环境。

4、拥有中级编程教程文档一份，根据中级考试大纲编写。后续也许会出 Linux 拥有杂记、Linux 编程杂记、等。

5、拥有开源仓库，CoreMP135_buildroot-external-st、M5Stack_Linux_Libs、CoreMP135_buildroot

目前 CoreMP135 的发展路线为 SDK 方案 + 具体单体应用模式 + 开源教育模式。

## CoreMP135 开箱即用方案

对于开箱即用的单例方案有三种：

第一种：做单系统多型态配置方案，开机后使用 web 界面或者类似于 raspbi-config 方案进行型态配置。配置为 LoraWAN 型态、OpenPLC型态、HomeAssistant型态。改变型态后，系统自动展开相应的配置，完成软件部署，使用户能够快速使用到 CoreMP135 各类应用场景。这是示例型系统选择。

第二种：做多系统多型态配置方案，对每一种型态单独配置一个系统，系统之间不会相互干扰。用户根据需要自行下载使用特定型态的 CoreMP135 系统，减少了配置操作。这是定向型的产品型态。

第三种：提供软件和手册，用户自行下载安装配置。用户的可操作自主性更强。这是 Linux 用户拿到产品的通用操作。

当前各类 Linux 派使用的都是第三种方案。当前的工作方向也是在第三种方案。

## 参考

- Home Assistant 中文网 :https://home-assistant-china.github.io/developers/

- stm32mp135产品简介：https://www.stmcu.com.cn/Mobile/pro_detail/cat_code/STM32MP135/family/81/sub_family/264/sub_child_family/569/layout/product

- ESPHOME：https://esphome.io/

- linux：https://baike.baidu.com/item/Linux/27050?fr=ge_ala

- 操作系统知识汇总：https://zhuanlan.zhihu.com/p/586916441

- 统一设备模型总结：https://zhuanlan.zhihu.com/p/563130544
- AIOT-物模型：https://blog.csdn.net/weixin_47567401/article/details/113813882
- HarmonyOS 分布式软总线架构组成 分布式软总线 鸿蒙：https://blog.51cto.com/u_13521/7402994
- 分布式集群概念认知及部署方案：https://baijiahao.baidu.com/s?id=1762327797526808404&wfr=spider&for=pc
- 分布式和集群的区别：https://blog.csdn.net/u011428598/article/details/83153462
- 数据中台简述：https://zhuanlan.zhihu.com/p/699409103
- 物联网：https://baike.baidu.com/item/%E7%89%A9%E8%81%94%E7%BD%91/7306589?fr=ge_ala
- 数字孪生：https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%AD%AA%E7%94%9F/22197545?fr=ge_ala
- 数字孪生：构建虚实桥梁，引领未来行业数字化新纪元：https://zhuanlan.zhihu.com/p/700009826
- 数字孪生与物联网：https://baijiahao.baidu.com/s?id=1786509732703999128&wfr=spider&for=pc
- 工业4.0：https://www.e-works.net.cn/report/industry/industry.html
- 什么是工业4.0：https://baijiahao.baidu.com/s?id=1765114321892342781&wfr=spider&for=pc
- 人工智能与物联网：融合创新驱动未来 ：https://www.bilibili.com/read/cv35755403/
- 人工智能与物联网融合技术架构：连接智慧生活的节点：https://baijiahao.baidu.com/s?id=1783551370528228204&wfr=spider&for=pc







